#!/bin/zsh

if type short_hostname | grep -q 'shell function'; then
    unfunction short_hostname
fi

# get short hostname callback and/or domain
KNOWN_DOMAINS=.local
[ -e $HOME/.zsh.d/hostname.local ] && source $HOME/.zsh.d/hostname.local

if ! type short_hostname >& /dev/null; then
    function short_hostname() {
        hostname="$(hostname)"
        for d in ${=KNOWN_DOMAINS}; do
            if [[ $hostname[-${#d},-1] == $d ]]; then
                return 0
            fi
        done
        return 1
    }
fi

# Get the short hostname if the machine is in the current site; use
# the long hostname otherwise
__CURRENT_HOSTNAME=
if short_hostname; then
    __CURRENT_HOSTNAME=$(hostname -s)
else
    __CURRENT_HOSTNAME=$(hostname --fqdn)
    if [[ $? != 0 || $(echo $domain | wc -l) > 1 ]]; then
        # the second part of this is a very silly check for a "stupid"
        # hostname executable that doesn't understand --fqdn (e.g., on OS
        # X or AIX).  More than one line would seem to indicate an error
        # message.  At least on AIX, hostname does _not_ return non-0 if
        # you give it bogus arguments, so we can't depend on return value
        __CURRENT_HOSTNAME=$(hostname)
    fi
fi

export __CURRENT_HOSTNAME
