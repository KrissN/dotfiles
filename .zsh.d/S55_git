#!/bin/zsh

export __CURRENT_GIT_REPO=
export __CURRENT_GIT_BRANCH=
export __CURRENT_GIT_UNPUSHED=

parse_git_repo() {
    export __CURRENT_GIT_REPO="$(git remote -v 2> /dev/null | \
        awk '/^origin\s.*\(fetch\)$/ { split($2,a,"[:/]"); sub(/\.git$/, "", a[length(a)]); print a[length(a)]; }' | \
        tail -n 1)"
    if [[ $__CURRENT_GIT_REPO != "dotfiles" ]]; then
        export __CURRENT_GIT_BRANCH="$(git branch --no-color 2> /dev/null | \
            sed -e '/^[^*]/d; s/^* //;')"
        _unpushed=$(git log @{u}.. --oneline 2>&1)
        if [[ -n $_unpushed ]] && ! echo "$_unpushed" | grep -q fatal; then
            export __CURRENT_GIT_UNPUSHED=$(echo $_unpushed | wc -l)
        else
            export __CURRENT_GIT_UNPUSHED=
        fi
    else
        export __CURRENT_GIT_BRANCH=
        export __CURRENT_GIT_UNPUSHED=
    fi
}

zsh_update_git_vars() {
    case "$1" in
        *git*)
            parse_git_repo
            ;;
    esac
}

get_git_prompt_info() {
    if [[ -n $__CURRENT_GIT_REPO && -n $__CURRENT_GIT_BRANCH ]]; then
        if [[ $__CURRENT_GIT_UNPUSHED > 0 ]]; then
            echo " (${__CURRENT_GIT_REPO}:${__CURRENT_GIT_BRANCH} ${PR_BRIGHT_CYAN}(${__CURRENT_GIT_UNPUSHED})${PR_RESET}${PR_CYAN})"
        else
            echo " (${__CURRENT_GIT_REPO}:${__CURRENT_GIT_BRANCH})"
        fi
    fi
}

git_submodule_update() {
    topdir=$(git rev-parse --show-cdup)
    if [[ -n $topdir ]]; then
        pushd $topdir
    fi
    git submodule update
    if [[ -n $topdir ]]; then
        popd
    fi
}

if type git >& /dev/null; then
    if [[ -z $__git_bin ]]; then
        if [[ $(type git) == "git is a shell function" ]]; then
            unfunction git
        fi
        __git_bin=$(which git)
    fi

    # we run parse_git_repo and parse_git_branch on three occasions:
    #
    # 1.  When this file is first loaded;
    # 2.  When a git command is run; and
    # 3.  When cd is run
    parse_git_repo
    preexec_functions[$(($#preexec_functions + 1))]='zsh_update_git_vars'
    chpwd_functions[$(($#chpwd_functions + 1))]='parse_git_repo'

    git() {
        cmd=$1
        if [[ -n $cmd && ($cmd == "co" || $cmd == "checkout") ]]; then
            $__git_bin $*
            rv=$?
            git_submodule_update
            return $rv
        else
            $__git_bin $*
        fi
    }
fi
