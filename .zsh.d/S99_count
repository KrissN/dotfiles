#!/bin/zsh

# Count or averages occurences of a string in syslog by days, hours,
# minutes, or seconds.  For instance:
#
# % grep -E 'Packages: Got [[:digit:]]{3,} unknown entries' \
#     /var/log/messages | count
# Jan 1 03:00    1
# Jan 1 04:00    3
# Jan 1 05:00    2
# Jan 1 06:00    1
# Jan 1 07:00    0
# Jan 1 08:00    4
# Jan 1 09:00    2
# Jan 1 10:00    1
# ...
#
# Or, average:
#
# % grep -E 'Packages: Got [[:digit:]]{3,} unknown entries' \
#     /var/log/messages | average -D '{ print $8 }'
# Jan 1    152.00
# Jan 2    151.00
# Jan 3    434.00
# Jan 4    442.00
#
# Also includes an output mode (-s) suitable for use with spark
# (https://github.com/holman/spark)
#
# Parts of this will likely work in bash, too.  'average' won't work
# with floating-point numbers in bash, but it should work otherwise.

# Usage subroutine
__count_usage() {
    echo "Count or average occurrences of a pattern in syslog by days (-D), "
    echo "hours (-H), minutes (-M), or seconds (-S)."
    echo "Usage: count [-s] [-D|-H|-M|-S]"
    echo "Usage: average [-s] [-D|-H|-M|-S] <awk expression>"
    echo "   -s: Produce output suitable for piping to spark"
}

# usage: __count_output count <time period> <count>
#        __count_output average <time period> <count> <total>
#
# outputs a record in the correct format
__count_output() {
    mode=$1
    time=$2
    count=$3
    total=$4
    if [[ $mode == "average" ]]; then
        format="%0.2f"
        val=$((total / count))
    else
        format="%s"
        val=$count
    fi

    if [[ $spark == 1 ]]; then
        printf "$format," "$val"
    else
        printf "%s    $format\n" "$time" "$val"
    fi
}

count() {
    __count count "$@"
}

average() {
    __count average "$@"
}

__count() {
    mode=$1
    shift

    # Process arguments
    collect=H
    spark=
    while getopts "hzsDHMS:" option; do
        case $option in
            [DHMS] )
                collect=$option
                ;;
            s )
                spark=1
                ;;
            h | \? )
                __count_usage
                return 1
                ;;
            * )
                echo "Option $option not understood"
                __count_usage
                return 1
                ;;
        esac
    done

    if [[ $mode == "average" ]]; then
        shift $((OPTIND - 1))
        if [[ -z $1 ]]; then
            echo "Error: no awk expression supplied"
            __avg_usage
            return 1
        fi
        awk=$1
    fi

    # the awk-fu we use to get the string that uniquely identifies
    # each time period
    csplit='[[:space:]]+|:'
    if [[ $collect == "D" ]]; then
        csplit='[[:space:]]+'
        cfunc='$1,$2'
    elif [[ $collect == 'H' ]]; then
        cfunc='$1, $2, $3 ":00"'
    elif [[ $collect == 'M' ]]; then
        cfunc='$1, $2, $3 ":" $4 ":00"'
    elif [[ $collect == 'S' ]]; then
        cfunc='$1, $2, $3 ":" $4 ":" $5'
    fi

    last=
    current=
    count=0
    total=0
    while read line; do
        current=$(echo "$line" | awk -F "$csplit" "{ print $cfunc }")
        if [[ $mode == "average" ]]; then
            value=$(echo "$line" | awk "$awk")
        else
            value=0
        fi

        if [[ -z $last ]]; then
            last=$current
            total=$((total + value))
            count=$((count + 1))
        elif [[ $current != $last ]]; then
            __count_output "$mode" "$last" $count $total
            last=$current
            count=1
            total=$value
        else
            count=$((count + 1))
            total=$((total + value))
        fi
    done
    __count_output "$mode" "$last" $count $total
}
